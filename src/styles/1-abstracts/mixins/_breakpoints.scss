/*
    Default usage:              @include media('breakpoint') {}
    Usage for min-width:        @include media(value, 0) {}
    Usage for max-width:        @include media(0, value) {}
    Usage for both:             @include media('value, value') {}
    Usage for orientation:      @include media('orientation') {}
    Usage for retina:           @include media('retina') {}
*/

@use '../variables' as *;
@use 'px-to-rem' as *;

//  Mixin: Media Breakpoints

@mixin media($min: 0, $max: 0) {
  $type: type-of($min);

  @if $type == string {
    // Breakpoints

    @if $min == small {
      @media (max-width: rem($breakpointSmall)) {
        @content;
      }
    } @else if $min == medium {
      @media (max-width: rem($breakpointLarge - 1)) {
        @content;
      }
    } @else if $min == large {
      @media (min-width: rem($breakpointLarge)) {
        @content;
      }
    } @else if $min == xlarge {
      @media (min-width: rem($breakpointXLarge)) {
        @content;
      }
    }

    // Orientation

    @else if $min == portrait {
      @media screen and (orientation: portrait) {
        @content;
      }
    } @else if $min == landscape {
      @media screen and (orientation: landscape) {
        @content;
      }
    }

    // Retina

    @else if $min == retina {
      @media (min--moz-device-pixel-ratio: 1.3),
        (-o-min-device-pixel-ratio: 2.6/2),
        (-webkit-min-device-pixel-ratio: 1.3),
        (min-device-pixel-ratio: 1.3),
        (min-resolution: 1.3dppx) {
        @content;
      }
    }

    // Warning

    @else {
      @warn "The breakpoint mixin supports only the following attributes: small, medium, large, xlarge, portrait, landscape, retina";
    }
  }

  // Custom Breakpoints

  @else if $type == number {
    $query: 'all' !default;
    @if $min != 0 and $max != 0 {
      $query: '(min-width: rem(#$min})) and (max-width: rem(#{$max}))';
    } @else if $min != 0 and $max == 0 {
      $query: '(min-width: rem(#{$min}))';
    } @else if $min == 0 and $max != 0 {
      $query: '(max-width: rem(#{$max}))';
    }
    @media #{$query} {
      @content;
    }
  }
}

//  Mixin for writing out breakpoint names in an after pseudo element

@mixin defineBreakpoint($name) {
  &::after {
    content: $name;
    display: none;
  }
}

//  Calling out writing-out function

body {
  @include media('medium') {
    @include defineBreakpoint('medium');
  }

  @include media('small') {
    @include defineBreakpoint('small');
  }

  @include media('large') {
    @include defineBreakpoint('large');
  }

  @include media('xlarge') {
    @include defineBreakpoint('xlarge');
  }
}
